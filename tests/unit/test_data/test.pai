set count to 0
set message to "Test started"
set pi to 3
set is_active to true

print message
print "Value of count: "
print count
print "PI equals: "
print pi

when count = 0 {
    print "Count is zero"
    set count to count + 1
} otherwise {
    print "Count is not zero"
}

print "After first check count equals: "
print count

when count > 5 {
    print "Count is greater than 5"
} otherwise {
    print "Count is less than or equal to 5"
    set count to count + 5
}

print "After second check count equals: "
print count

tool calculate_area(radius) {
    return pi * radius
}

tool find_max(a, b) {
    when a > b {
        return a
    } otherwise {
        return b
    }
}

tool fibonacci(n) {
    when n <= 1 {
        return n
    } otherwise {
        fibonacci(n - 1)
        set fib1 to result
        fibonacci(n - 2)
        set fib2 to result
        return fib1 + fib2
    }
}

set radius to 5
calculate_area(radius)
set area to result
print "Circle area with radius 5: "
print area

find_max(10, 7)
print "Maximum of 10 and 7: "
print result

find_max(3, 15)
print "Maximum of 3 and 15: "
print result

set fib_index to 6
fibonacci(fib_index)
print "Fibonacci number "
print fib_index
print " equals: "
print result

tool recursive_sum(n) {
    when n <= 1 {
        return n
    } otherwise {
        recursive_sum(n - 1)
        set prev_sum to result
        return n + prev_sum
    }
}

recursive_sum(5)
print "Sum of numbers from 1 to 5: "
print result

tool test_scoping() {
    set local_var to "local variable"
    set count to 100
    
    tool nested_function() {
        set nested_var to "nested variable"
        set local_var to "modified local"
        set combined to "nested variable and modified local"
        return combined
    }
    
    nested_function()
    print "Result from nested function: "
    print result
    print "Local var in outer function: "
    print local_var
    print "Count in function (should be 100): "
    print count
    
    return "Scoping test complete"
}

test_scoping()
print "Result from scoping test: "
print result
print "Count in global scope (should still be 6): "
print count

print "Test finished"
